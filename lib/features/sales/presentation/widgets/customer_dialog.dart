import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:flutter_paint_store_app/models/customer.dart';
import 'package:flutter_paint_store_app/features/sales/application/sales_state.dart';

class CustomerDialog extends ConsumerStatefulWidget {
  final Customer? customer;

  const CustomerDialog({
    super.key,
    this.customer,
  });

  @override
  ConsumerState<CustomerDialog> createState() => _CustomerDialogState();
}

class _CustomerDialogState extends ConsumerState<CustomerDialog> {
  final _formKey = GlobalKey<FormState>();

  // Controllers for form fields
  late TextEditingController _nameController;
  late TextEditingController _codeController;
  late TextEditingController _phone1Controller;
  late TextEditingController _phone2Controller;
  late TextEditingController _birthdayController;
  late TextEditingController _emailController;
  late TextEditingController _facebookController;
  // ... add controllers for other fields as needed

  // State variables
  DateTime? _selectedDate;
  String? _selectedGender;
  bool _isSupplier = false;

  @override
  void initState() {
    super.initState();
    final customer = widget.customer;
    _nameController = TextEditingController(text: customer?.name ?? '');
    _codeController = TextEditingController(text: customer?.code ?? '');
    _phone1Controller =
    _phone2Controller = TextEditingController(); // Assuming no second phone in model
    _emailController = TextEditingController(text: customer?.email ?? '');
    _facebookController =
        TextEditingController(text: customer?.psidFacebook ?? '');

    _selectedDate = customer?.birthDate;
    _birthdayController = TextEditingController(
        text: _selectedDate != null
            ? DateFormat('dd/MM/yyyy').format(_selectedDate!)
            : '');

    if (customer?.gender != null) {
      _selectedGender = customer!.gender! ? 'Nam' : 'Nữ';
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _codeController.dispose();
    _phone1Controller.dispose();
    _phone2Controller.dispose();
    _birthdayController.dispose();
    _emailController.dispose();
    _facebookController.dispose();
    super.dispose();
  }

  void _handleSave() {
    if (_formKey.currentState!.validate()) {
      final isEditing = widget.customer != null;

      if (isEditing) {
        final updatedCustomer = widget.customer!.copyWith(
          name: _nameController.text,
          code: _codeController.text,
          contactNumber: _phone1Controller.text,
          birthDate: _selectedDate,
          gender: _selectedGender == 'Nam'
              ? true
              : _selectedGender == 'Nữ'
                  ? false
                  : null,
          email: _emailController.text,
          psidFacebook: _facebookController.text,
          modifiedDate: DateTime.now(),
        );
        ref.read(quoteProvider.notifier).updateCustomer(updatedCustomer);
      } else {
        final newCustomer = Customer(
          id: DateTime.now().millisecondsSinceEpoch,
          name: _nameController.text,
          code: _codeController.text, // Should be auto-generated by backend
          contactNumber: _phone1Controller.text,
          createdDate: DateTime.now(),
          birthDate: _selectedDate,
          gender: _selectedGender == 'Nam'
              ? true
              : _selectedGender == 'Nữ'
                  ? false
                  : null,
          email: _emailController.text,
          psidFacebook: _facebookController.text,
        );
        ref.read(quoteProvider.notifier).addCustomerAndSelect(newCustomer);
      }
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.customer != null;

    return AlertDialog(
      title: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(isEditing ? 'Sửa thông tin khách hàng' : 'Tạo khách hàng'),
          IconButton(
            icon: const Icon(Icons.close),
            onPressed: () => Navigator.of(context).pop(),
          )
        ],
      ),
      content: SizedBox(
        width: double.maxFinite,
        child: Form(
          key: _formKey,
          child: LayoutBuilder(
            builder: (context, constraints) {
              // Use a breakpoint to switch between layouts
              if (constraints.maxWidth > 800) {
                return _buildWideLayout();
              } else {
                return _buildNarrowLayout();
              }
            },
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Bỏ qua'),
        ),
        FilledButton(
          onPressed: _handleSave,
          child: const Text('Lưu'),
        ),
      ],
    );
  }

  /// Builds the layout for narrow screens (Mobile)
  Widget _buildNarrowLayout() {
    return SingleChildScrollView(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildNameField(),
          const SizedBox(height: 16),
          _buildCodeField(),
          const SizedBox(height: 24),
          _buildImageUploader(),
          const SizedBox(height: 24),
          _buildPhone1Field(),
          const SizedBox(height: 16),
          _buildPhone2Field(),
          const SizedBox(height: 16),
          _buildBirthdayField(),
          const SizedBox(height: 16),
          _buildGenderField(),
          const SizedBox(height: 16),
          _buildEmailField(),
          const SizedBox(height: 16),
          _buildFacebookField(),
        ],
      ),
    );
  }

  /// Builds the layout for wide screens (Desktop/Tablet)
  Widget _buildWideLayout() {
    return SingleChildScrollView(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Left column for input fields
              Expanded(
                flex: 2,
                child: Column(
                  children: [
                    Row(
                      children: [
                        Expanded(child: _buildNameField()),
                        const SizedBox(width: 16),
                        Expanded(child: _buildCodeField()),
                      ],
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(child: _buildPhone1Field()),
                        const SizedBox(width: 16),
                        Expanded(child: _buildPhone2Field()),
                      ],
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(child: _buildBirthdayField()),
                        const SizedBox(width: 16),
                        Expanded(child: _buildGenderField()),
                      ],
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(child: _buildEmailField()),
                        const SizedBox(width: 16),
                        Expanded(child: _buildFacebookField()),
                      ],
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 24),
              // Right column for image uploader
              Expanded(
                flex: 1,
                child: _buildImageUploader(),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Expansion sections
          ExpansionTile(
            title: const Text('Địa chỉ'),
            children: [
              // Add address fields here
              const ListTile(title: Text('Chi tiết địa chỉ...'))
            ],
          ),
          ExpansionTile(
            title: const Text('Nhóm khách hàng, ghi chú'),
            children: [
              // Add group and note fields here
              const ListTile(title: Text('Nhóm, ghi chú...'))
            ],
          ),
          ExpansionTile(
            title: const Text('Thông tin xuất hóa đơn'),
            children: [
              // Add billing fields here
              const ListTile(title: Text('Tên công ty, mã số thuế...'))
            ],
          ),
          SwitchListTile(
            title: const Text('Khách hàng là nhà cung cấp'),
            value: _isSupplier,
            onChanged: (value) => setState(() => _isSupplier = value),
          ),
        ],
      ),
    );
  }

  // --- Field Widgets ---

  Widget _buildNameField() => TextFormField(
        controller: _nameController,
        decoration: const InputDecoration(
            labelText: 'Tên khách hàng', hintText: 'Bắt buộc'),
        validator: (value) =>
            (value == null || value.isEmpty) ? 'Vui lòng nhập tên' : null,
      );

  Widget _buildCodeField() => TextFormField(
        controller: _codeController,
        readOnly: true,
        decoration: const InputDecoration(
            labelText: 'Mã khách hàng', hintText: 'Tự động'),
      );

  Widget _buildPhone1Field() => TextFormField(
        controller: _phone1Controller,
        decoration: const InputDecoration(labelText: 'Điện thoại 1'),
        keyboardType: TextInputType.phone,
      );

  Widget _buildPhone2Field() => TextFormField(
        controller: _phone2Controller,
        decoration: const InputDecoration(labelText: 'Điện thoại 2'),
        keyboardType: TextInputType.phone,
      );

  Widget _buildEmailField() => TextFormField(
        controller: _emailController,
        decoration: const InputDecoration(labelText: 'Email'),
        keyboardType: TextInputType.emailAddress,
      );

  Widget _buildFacebookField() => TextFormField(
        controller: _facebookController,
        decoration: const InputDecoration(labelText: 'Facebook'),
      );

  Widget _buildBirthdayField() => TextFormField(
        controller: _birthdayController,
        readOnly: true,
        decoration: const InputDecoration(
          labelText: 'Sinh nhật',
          suffixIcon: Icon(Icons.calendar_today),
        ),
        onTap: () async {
          final pickedDate = await showDatePicker(
            context: context,
            initialDate: _selectedDate ?? DateTime.now(),
            firstDate: DateTime(1900),
            lastDate: DateTime.now(),
          );
          if (pickedDate != null && pickedDate != _selectedDate) {
            setState(() {
              _selectedDate = pickedDate;
              _birthdayController.text =
                  DateFormat('dd/MM/yyyy').format(pickedDate);
            });
          }
        },
      );

  Widget _buildGenderField() => DropdownButtonFormField<String>(
        value: _selectedGender,
        decoration: const InputDecoration(labelText: 'Giới tính'),
        items: ['Nam', 'Nữ', 'Khác']
            .map((label) => DropdownMenuItem(
                  value: label,
                  child: Text(label),
                ))
            .toList(),
        onChanged: (value) {
          setState(() {
            _selectedGender = value;
          });
        },
      );

  Widget _buildImageUploader() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        GestureDetector(
          onTap: () {
            // TODO: Handle image picking logic
          },
          child: CircleAvatar(
            radius: 50,
            backgroundColor: Theme.of(context).colorScheme.surfaceContainer,
            child: const Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(Icons.camera_alt_outlined),
                SizedBox(height: 4),
                Text('Thêm ảnh', style: TextStyle(fontSize: 12)),
              ],
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          'Ảnh không được vượt quá 2MB',
          style: Theme.of(context).textTheme.bodySmall,
        ),
      ],
    );
  }
}
